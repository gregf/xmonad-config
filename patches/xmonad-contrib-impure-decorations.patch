--- XMonadContrib/XMonad/Layout/Decoration.hs	2010-09-18 08:13:10.000000000 +0400
+++ XMonadContrib/XMonad/Layout/Decoration.hs	2010-09-18 08:13:10.000000000 +0400
@@ -2,7 +2,7 @@
 -----------------------------------------------------------------------------
 -- |
 -- Module      :  XMonad.Layout.Decoration
--- Copyright   :  (c) 2007 Andrea Rossato, 2009 Jan Vornberger
+-- Copyright   :  (c) 2007 Andrea Rossato, 2009 Jan Vornberger, 2011 Evgeny I. E. Omelchenko
 -- License     :  BSD-style (see xmonad/LICENSE)
 --
 -- Maintainer  :  andrea.rossato@unibz.it
@@ -29,7 +29,8 @@
     , module XMonad.Layout.LayoutModifier
     ) where
 
-import Control.Monad (when)
+import Control.Monad (when, join, liftM)
+import Data.Foldable (foldrM)
 import Data.Maybe
 import Data.List
 import Foreign.C.Types(CInt)
@@ -140,9 +141,13 @@
     describeDeco :: ds a -> String
     describeDeco ds = show ds
 
-    -- | Shrink the window's rectangle when applying a decoration.
+    -- | The pure version of the'shrinkX'
     shrink :: ds a -> Rectangle -> Rectangle -> Rectangle
     shrink _ (Rectangle _ _ _ dh) (Rectangle x y w h) = Rectangle x (y + fi dh) w (h - dh)
+ 
+    -- Shrink the window's rectangle when applying a decoration.
+    shrinkX :: ds a -> Rectangle -> Rectangle -> X Rectangle
+    shrinkX ds r s = return $ shrink ds r s
 
     -- | The decoration event hook
     decorationEventHook :: ds a -> DecorationState -> Event -> X ()
@@ -261,15 +266,17 @@
               | otherwise     = (w,r) : remove_stacked (r:rs) xs
           remove_stacked _ [] = []
 
-          insert_dwr ((w,r),(Just dw,Just dr)) xs = (dw,dr):(w, shrink ds dr r):xs
-          insert_dwr (x    ,(     _ ,     _ )) xs = x:xs
-
-          dwrs_to_wrs    = remove_stacked [] . foldr insert_dwr []
-
+          insert_dwr ((w,r),(Just dw,Just dr)) xs = do ws <- shrinkX ds dr r
+                                                       return $ (dw,dr):(w, ws):xs
+          insert_dwr (x    ,(     _ ,     _ )) xs = return $ x:xs
+ 
+          dwrs_to_wrs    = liftM (remove_stacked []) . foldrM insert_dwr []
+ 
           processState s = do let ndwrs = decos s
                               showDecos (map snd ndwrs)
                               updateDecos sh t (font s) ndwrs
-                              return (dwrs_to_wrs ndwrs, Just (Decoration (I (Just (s {decos = ndwrs}))) sh t ds))
+                              wrs <- dwrs_to_wrs ndwrs
+                              return $ (wrs, Just (Decoration (I (Just (s {decos = ndwrs}))) sh t ds))
 
     handleMess (Decoration (I (Just s@(DS {decos = dwrs}))) sh t ds) m
         | Just e <- fromMessage m                = do decorationEventHook ds s e
